/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*|MAKE_TRANSCRIPTS_FASTA' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'SALMON_INDEX' {
        ext.args   = { [
                params.gencode ? '--gencode' : '',
                params.pseudo_aligner_kmer_size ? "-k ${params.pseudo_aligner_kmer_size}": ''
        ].join(' ').trim() }
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'GTF2BED' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'CUSTOM_CATADDITIONALFASTA|PREPROCESS_TRANSCRIPTS_FASTA_GENCODE' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'GTF_FILTER' {
        ext.args   = { params.skip_gtf_transcript_filter ?: '--skip_transcript_id_check' }
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_merged_fastq ? filename : null }
        ]
    }
}

if (!params.skip_bbsplit && params.bbsplit_fasta_list) {
    process {
        withName: '.*:PREPARE_GENOME:BBMAP_BBSPLIT' {
            ext.args   = 'build=1'
            publishDir = [
                path: { "${params.outdir}/genome/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
            ]
        }
    }
}

if (params.remove_ribo_rna && params.ribo_database_manifest) {
    process {
        withName: 'SORTMERNA_INDEX' {
            ext.args   = '--index 1'
            publishDir = [
                path: { "${params.outdir}/genome/sortmerna" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : params.save_reference ? filename : null }
            ]
        }
    }
}

//
// Read subsampling and strand inferring options
//

process {
    withName: 'FQ_SUBSAMPLE' {
        ext.args   = '--record-count 1000000 --seed 1'
        ext.prefix = { "${meta.id}.subsampled" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:FASTQ_SUBSAMPLE_FQ_SALMON:SALMON_QUANT' {
        ext.args   = '--skipQuant'
        publishDir = [
            enabled: false
        ]
    }
}

//
// Linting options
//

if (! params.skip_linting) {

    process {

        withName: 'FQ_LINT' {
            ext.args   = { params.extra_fqlint_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/preprocessing/fq_lint/raw" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'FQ_LINT_AFTER_TRIMMING' {
            publishDir = [
                path: { "${params.outdir}/preprocessing/fq_lint/trimmed" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'FQ_LINT_AFTER_BBSPLIT' {
            publishDir = [
                path: { "${params.outdir}/preprocessing/fq_lint/sortmerna" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'FQ_LINT_AFTER_SORTMERNA' {
            publishDir = [
                path: { "${params.outdir}/preprocessing/fq_lint/trimmed" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
                ext.prefix = { "${meta.id}_raw" }
                ext.args   = '--quiet'
                publishDir = [
                    path: { "${params.outdir}/preprocessing/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (params.trimmer == 'fastp') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
                ext.prefix = { "${meta.id}_raw" }
                ext.args   = '--quiet'
                publishDir = [
                    path: { "${params.outdir}/preprocessing/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
                ext.prefix = { "${meta.id}_trimmed" }
                ext.args   = '--quiet'
                publishDir = [
                    path: { "${params.outdir}/${params.trimmer}/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_trimming) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
                ext.args   = {
                    [
                        "--fastqc_args '-t ${task.cpus}'",
                        params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
                    ].flatten().unique(false).join(' ').trim()
                }
                publishDir = [
                    [
                        path: { "${params.outdir}/preprocessing/${params.trimmer}/fastqc" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{html,zip}"
                    ],
                    [
                        path: { "${params.outdir}/preprocessing/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.fq.gz",
                        saveAs: { params.save_trimmed ? it : null }
                    ],
                    [
                        path: { "${params.outdir}/preprocessing/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.txt"
                    ]
                ]
            }
        }
    }

    if (params.trimmer == 'fastp') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
                ext.args   = { params.extra_fastp_args ?: '' }
                publishDir = [
                    [
                        path: { "${params.outdir}/preprocessing/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{json,html}"
                    ],
                    [
                        path: { "${params.outdir}/preprocessing/${params.trimmer}/log" },
                        mode: params.publish_dir_mode,
                        pattern: "*.log"
                    ],
                    [
                        path: { "${params.outdir}/preprocessing/${params.trimmer}" },
                        mode: params.publish_dir_mode,
                        pattern: "*.fastq.gz",
                        saveAs: { params.save_trimmed ? it : null }
                    ]
                ]
            }
        }
    }
}

if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: 'UMITOOLS_EXTRACT' {
            ext.args   = { [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim() }
            publishDir = [
                [
                    path: { "${params.outdir}/preprocessing/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/preprocessing/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { params.save_umi_intermeds ? it : null }
                ]
            ]
        }
    }
}

//
// Contaminant removal options
//

if (!params.skip_bbsplit) {
    process {
        withName: 'BBMAP_BBSPLIT' {
            ext.args   = 'build=1 ambiguous2=all maxindel=150000 ow=f'
            publishDir = [
                [
                    path: { "${params.outdir}/preprocessing/bbsplit" },
                    mode: params.publish_dir_mode,
                    pattern: '*.txt'
                ],
                [
                    path: { "${params.outdir}/preprocessing/bbsplit" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_bbsplit_reads ? it : null }
                ]
            ]
        }
    }
}

if (params.remove_ribo_rna) {
    process {
        withName: '.*:FASTQ_QC_TRIM_FILTER_SETSTRANDEDNESS:SORTMERNA' {
            ext.args   = '--num_alignments 1 -v --index 0'
            publishDir = [
                [
                    path: { "${params.outdir}/preprocessing/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/preprocessing/sortmerna" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    saveAs: { params.save_non_ribo_reads ? it : null }
                ]
            ]
        }
    }
}

//
// General alignment options
//

if (!params.skip_alignment) {
    process {

        withName: 'NFCORE_RIBOSEQ:RIBOSEQ:.*:BAM_SORT_STATS_SAMTOOLS_GENOME:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.genome.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/alignment/${params.aligner}/sorted/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_RIBOSEQ:RIBOSEQ:.*:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.transcriptome.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/alignment/${params.aligner}/sorted/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'NFCORE_RIBOSEQ:RIBOSEQ:.*:BAM_SORT_STATS_SAMTOOLS_GENOME:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.genome.sorted" }
            publishDir = [
                path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                saveAs: { ( ['star'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? it : null }
            ]
        }

        withName: 'NFCORE_RIBOSEQ:RIBOSEQ:.*:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPTOME:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.transcriptome.sorted" }
            publishDir = [
                path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                saveAs: { ( ['star'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? it : null }
            ]
        }

        withName: 'NFCORE_RIBOSEQ:RIBOSEQ:.*:BAM_SORT_STATS_SAMTOOLS_GENOME:SAMTOOLS_INDEX' {
            ext.args   = { params.bam_csi_index ? '-c' : '' }
            publishDir = [
                path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                saveAs: { ( ['star'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? it : null }
            ]
        }

        withName: 'NFCORE_RIBOSEQ:RIBOSEQ:.*:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
            ext.args   = { params.bam_csi_index ? '-c' : '' }
            publishDir = [
                path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                saveAs: { ( ['star'].contains(params.aligner) &&
                        ( params.save_align_intermeds || ( !params.with_umi && params.skip_markduplicates ) )
                    ) || params.save_align_intermeds || params.skip_markduplicates ? it : null }
            ]
        }
    }

    if (!params.skip_markduplicates && !params.with_umi) {
        process {
            withName: '.*:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
                ext.prefix = { "${meta.id}.markdup.sorted" }
                publishDir = [
                    [
                        path: { "${params.outdir}/alignment/${params.aligner}/picard_metrics" },
                        mode: params.publish_dir_mode,
                        pattern: '*metrics.txt'
                    ],
                    [
                        path: { "${params.outdir}/alignment/${params.aligner}" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam'
                    ]
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.args   = { params.bam_csi_index ? '-c' : '' }
                ext.prefix = { "${meta.id}.markdup.sorted" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}'
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.markdup.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
}

//
// STAR Salmon alignment options
//

if (!params.skip_alignment && params.aligner == 'star') {
    process {
        withName: 'STAR_ALIGN' {
            ext.args   = { [
                '--alignSJDBoverhangMin 1',
                '--alignEndsType EndToEnd',
                '--outFilterMultimapNmax 20',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
                '--outSAMattributes All',
                '--outSAMstrandField intronMotif',
                '--outSAMtype BAM Unsorted',
                '--quantMode TranscriptomeSAM',
                '--quantTranscriptomeSAMoutput BanSingleEnd',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--twopassMode Basic',
                params.extra_star_align_args ? params.extra_star_align_args.split("\\s(?=--)") : ''
            ].flatten().unique(false).join(' ').trim() }
            publishDir = [
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/alignment/${params.aligner}/original" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds ? it : null }
                ],
                [
                    path: { "${params.outdir}/alignment/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { "${params.outdir}/alignment/${params.aligner}/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_unaligned ? it : null }
                ]
            ]
        }

        withName: '.*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
            publishDir = [
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/alignment/${params.aligner}/original" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai.csi}',
                    saveAs: { params.save_align_intermeds ? it : null }
                ]
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
            ext.args   = { params.extra_salmon_quant_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/quantification/salmon" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('_meta_info.json') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:CUSTOM_TX2GENE' {
            publishDir = [
                path: { "${params.outdir}/quantification" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:TXIMETA_TXIMPORT' {
            ext.prefix = { "${quant_type}.merged" }
            publishDir = [
                path: { "${params.outdir}/quantification/salmon" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:QUANTIFY_STAR_SALMON:SE_.*' {
            publishDir = [
                path: { "${params.outdir}/quantification/salmon" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_GENE' {
            ext.prefix = { "salmon.merged.gene" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_GENE_LENGTH_SCALED' {
            ext.prefix = { "salmon.merged.gene.length_scaled" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_GENE_SCALED' {
            ext.prefix = { "salmon.merged.gene.scaled" }
        }
        withName: '.*:QUANTIFY_STAR_SALMON:SE_TRANSCRIPT' {
            ext.prefix = { "salmon.merged.transcript" }
        }
    }

    if (params.with_umi) {
        process {

            // UMI deduplication args

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_(GEN|TRANSCRIPT)OME:UMITOOLS_DEDUP' {
                ext.args = { [
                    meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
                    params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
                    params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
                ].join(' ').trim() }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMICOLLAPSE_(GEN|TRANSCRIPT)OME:UMICOLLAPSE' {
                ext.args = { [
                    '--two-pass',
                    meta.single_end                 ? '' : '--paired --remove-unpaired --remove-chimeric',
                    params.umitools_grouping_method ? "--algo '" + ['directional':'dir','adjacency':'adj','cluster':'cc'].get(params.umitools_grouping_method, '') + "'" : '',
                    params.umitools_umi_separator   ? "--umi-sep '${params.umitools_umi_separator}'" : '',
                ].join(' ').trim()}
            }

            // Name deduplicated genome files the same way irrespective of method

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_GENOME:UMI(TOOLS_DEDUP|COLLAPSE)' {
                ext.prefix = { "${meta.id}.umi_dedup.genome.sorted" }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_TRANSCRIPTOME:UMI(TOOLS_DEDUP|COLLAPSE)' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
            }

            // Publishing- send logs and bams to same place for umitools and umicollapse

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(COLLAPSE|TOOLS)_(GEN|TRANSCRIPT)OME:UMI(COLLAPSE|TOOLS_DEDUP)' {

                publishDir = [
                    [
                        path: { "${params.outdir}/alignment/${params.aligner}/deduplicated/log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.{log,tsv}'
                    ],
                    [
                        path: { "${params.outdir}/alignment/${params.aligner}/deduplicated" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ]
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(TOOLS|COLLAPSE)_(GEN|TRANSCRIPT)OME:SAMTOOLS_INDEX' {
                ext.args   = { params.bam_csi_index ? '-c' : '' }
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/deduplicated" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}',
                    saveAs: { params.save_align_intermeds || params.with_umi || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(TOOLS|COLLAPSE)_GENOME:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.umi_dedup.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/deduplicated/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }

            // This is the name sorting done to transcriptome bams after deduplication

            withName: 'NFCORE_RIBOSEQ:RIBOSEQ:BAM_DEDUP_UMI:SAMTOOLS_SORT' {
                ext.args   = '-n'
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: 'NFCORE_RIBOSEQ:RIBOSEQ:BAM_DEDUP_UMI:UMITOOLS_PREPAREFORRSEM' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.filtered" }
                publishDir = [
                    [
                        path: { "${params.outdir}/alignment/${params.aligner}/deduplicated/log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ],
                    [
                        path: { "${params.outdir}/alignment/${params.aligner}/deduplicated" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ]
                ]
            }

            withName: 'NFCORE_RIBOSEQ:RIBOSEQ:BAM_DEDUP_UMI:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.transcriptome.sorted" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: 'NFCORE_RIBOSEQ:RIBOSEQ:BAM_DEDUP_UMI:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/sorted" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: 'NFCORE_RIBOSEQ:RIBOSEQ:BAM_DEDUP_UMI:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.transcriptome.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/deduplicated/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(TOOLS|COLLAPSE)_TRANSCRIPTOME:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/deduplicated" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMI(TOOLS|COLLAPSE)_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted.bam" }
                publishDir = [
                    path: { "${params.outdir}/alignment/${params.aligner}/deduplicated/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
}


if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            ext.prefix = "multiqc_report"
            publishDir = [
                path: { [
                    "${params.outdir}/multiqc",
                    params.skip_alignment? '' : "/${params.aligner}"
                    ].join('') },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_ribotish) {
    process {
        withName: 'RIBOTISH_QUALITY' {
            ext.args   = { params.extra_ribotish_quality_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/riboseq_qc/ribotish" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: 'RIBOTISH_PREDICT_INDIVIDUAL' {
            ext.args   = { params.extra_ribotish_predict_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/orf_predictions/ribotish" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: 'RIBOTISH_PREDICT_ALL' {
            ext.args   = { params.extra_ribotish_predict_args ?: '' }
            publishDir = [
                path: { "${params.outdir}/orf_predictions/ribotish_all" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_ribotricer) {
    process {
        withName: 'RIBOTRICER_PREPAREORFS' {
            ext.args   = { params.extra_ribotricer_prepareorfs_args ?: '' }
        }
        withName: 'RIBOTRICER_DETECTORFS' {
            ext.args   = { params.extra_ribotricer_detectorfs_args ?: '' }
            publishDir = [
                [
                    path: { "${params.outdir}/riboseq_qc/ribotricer" },
                    mode: params.publish_dir_mode,
                    pattern: "*_{read_length_dist.pdf,metagene_plots.pdf,bam_summary.txt,protocol.txt,metagene_profiles_5p.tsv,metagene_profiles_3p.tsv}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ],
                [
                    path: { "${params.outdir}/orf_predictions/ribotricer" },
                    mode: params.publish_dir_mode,
                    pattern: "*_{translating_ORFs.tsv,psite_offsets.txt}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ],
                [
                    path: { "${params.outdir}/other/ribotricer" },
                    mode: params.publish_dir_mode,
                    pattern: "*_{pos.wig,neg.wig}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            ]
        }
    }
}

if (params.contrasts) {
    process {
        withName: 'ANOTA2SEQ_ANOTA2SEQRUN' {
            ext.args   = { [
                params.extra_ribotish_quality_args ?: '',
                meta.pair ? "--samples_pairing_col ${meta.pair}" : '',
                meta.batch ? "--samples_batch_col ${meta.batch}" : ''
            ].join(' ').trim() }
            publishDir = [
                path: { "${params.outdir}/translational_efficiency/anota2seq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
